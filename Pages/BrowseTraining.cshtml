@page
@model ETMP.Pages.BrowseTraining
@{
    ViewData["Title"] = "Browse for Trainings";
}

@using ETMP.Models
<!-- Include CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css" />
<link rel="stylesheet" href="//code.jquery.com/ui/1.13.0/themes/base/jquery-ui.css">
<script src="//code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="//code.jquery.com/ui/1.13.0/jquery-ui.min.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>

<style>
    .slideshow-container {
        position: relative;
        width: 100%;
        height: 500px;
        overflow: hidden;
        
    }

    .slideshow-slide {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        transition: opacity 1s ease-in-out;
        display:flex;
        flex-wrap:wrap;
    }

        .slideshow-slide.active {
            opacity: 1;
        }

    .training-name {
        font-size: 36px;
        margin-bottom: 10px;
        
    }

    .training-price {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .training-description {
        font-size: 16px;
    }
    .ssimgContainer img {
        height:100%;
        width:100%;
    }

    .slideshow-container, .myTableContainer {
        margin:10px;
    }

    .ssimgContainer{
        width:50%;
        height:100%;
    }
    .ssdescription{
        padding-left:20px;
        
    }

    .slideshow-container, .slideshow-container,.ssimgContainer{
        border:dashed;
    }

</style>

<div class="slideshow-container">
    @foreach (var training in Model.Trainings)
    {
        <div class="slideshow-slide" onclick="fillSearchBar('@training.TrainingName')">
            <div class="ssimgContainer">
                <img src=@training.TrainingImgURL>
            </div>
            <div class="ssdescription" >
                <h1 class="training-name" >@training.TrainingName</h1>
                <p class="training-price">Price : @training.TrainingPrice</p>
                <p class="training-description">Description :@training.TrainingDescription</p>
            </div>
        </div>
    }
</div>

<div class="myTableContainer">
    <table id="myTable">
        <thead>
            <tr>
                <th>Training Id</th>
                <th>Training Name</th>
                <th>Training Price</th>
                <th>Training Itinerary</th>
                <th>Training Venue</th>
                <th>Training Category</th>
                <th>Availability</th>
                <th>Training Description</th>
                <th>Training Start Date & Time</th>
                <th>Training End Date & Time</th>
                <!-- add more columns as needed -->
            </tr>
        </thead>
        <tbody>
            @foreach (var training in Model.Trainings)
            {
                <tr>
                    <td>@training.Id</td>
                    <td>@training.TrainingName</td>
                    <td>@training.TrainingPrice</td>
                    <td>@training.TrainingItinerary</td>
                    <td>@training.TrainingVenue</td>
                    <td>@training.TrainingCategory</td>
                    <td>@training.Availability</td>
                    <td>@training.TrainingDescription</td>
                    <td>@training.TrainingStartDateTime</td>
                    <td>@training.TrainingEndDateTime</td>
                </tr>
            }
        </tbody>
    </table>
</div>


<div>
    <button id="sortByName">Sort by Name (asc)</button>
    <button id="sortByPrice">Sort by Price (asc)</button>
</div>

<div id="priceRangeContainer">
    <label for="priceRangeSlider">Filter by Price Range:</label>
    <div id="priceRangeSlider"></div>
    <span id="priceRangeLabel"></span>
</div>
<div>
    <label for="categoryDropdown">Filter by Category:</label>
    <select id="categoryDropdown">
        <option value="">All Categories</option>
        @foreach (var training in Model.Trainings)
        {
            <option value="@training.TrainingCategory">@training.TrainingCategory</option>
        }
    </select>
</div>





<script>
    var table = $('#myTable').DataTable({
        responsive: true
    });

    let sortByName = 'asc';
    let sortByPrice = 'asc';

    // Sorting by name
    $('#sortByName').click(() => {
        if (sortByName === 'asc') {
            table.order([1, 'asc']).draw();
            sortByName = 'desc';
        } else {
            table.order([1, 'desc']).draw();
            sortByName = 'asc';
        }
    });

    // Sorting by price
    $('#sortByPrice').click(() => {
        if (sortByPrice === 'asc') {
            table.order([2, 'asc']).draw();
            sortByPrice = 'desc';
        } else {
            table.order([2, 'desc']).draw();
            sortByPrice = 'asc';
        }
    });

    // Set up the slider
    let priceRangeSlider = $('#priceRangeSlider');
    let priceRangeLabel = $('#priceRangeLabel');

    priceRangeSlider.slider({
        range: true,
        min: 0,
        max: 15000,
        values: [0, 15000],
        step: 10,
        slide: function (event, ui) {
            priceRangeLabel.text('$' + ui.values[0] + ' - $' + ui.values[1]);
            table.draw();
        }
    });

    // Add the initial price range label
    priceRangeLabel.text('$' + priceRangeSlider.slider('values', 0) + ' - $' + priceRangeSlider.slider('values', 1));

    // Filter the table based on the price range slider
    $.fn.dataTable.ext.search.push(
        function (settings, data, dataIndex) {
            let minPrice = priceRangeSlider.slider('values', 0);
            let maxPrice = priceRangeSlider.slider('values', 1);
            let price = parseFloat(data[2].replace(/[^0-9.-]/g, ''));
            return price >= minPrice && price <= maxPrice;
        }
    );

    // Filter the table based on the category dropdown
    $('#categoryDropdown').change(() => {
        let category = $('#categoryDropdown').val();
        table.column(5).search(category).draw();
    });
    //slideshow
    let slides = document.querySelectorAll('.slideshow-slide');
    let currentSlide = 0;

    function showSlide(n) {
        slides[currentSlide].classList.remove('active');
        currentSlide = (n + slides.length) % slides.length;
        slides[currentSlide].classList.add('active');
    }

    showSlide(currentSlide);

    setInterval(function () {
        showSlide(currentSlide + 1);
    }, 3000);




    function fillSearchBar(trainingName) {
            table.search(trainingName).draw();
    }


    var slideshowContainer = document.querySelector('.slideshow-slide');
    function fillSearchBar(trainingName) {
        if (slideshowContainer.classList.contains('active')) {
            table.search(trainingName).draw();
        } else {
            console.log('The slideshow container does not have the "active" class applied to it.');
        }
    }




</script>




